Aqui está um exemplo de um arquivo `README.md` que explica como foi feito o backend do projeto, como rodá-lo e também fornece scripts para facilitar o processo.

```markdown
# Academia App - Backend

Este repositório contém o backend para o aplicativo de gerenciamento de treinos em uma academia. Ele foi construído utilizando Node.js, Express e MongoDB.

## Funcionalidades

- **Autenticação**: Professores e alunos podem se registrar e fazer login.
- **Gerenciamento de Treinos**:
  - Professores podem criar e gerenciar planilhas de treino.
  - Cada treino pode conter atividades/exercícios, com descrições, quantidades de repetições/séries e links de vídeo.
  - Alunos podem visualizar os treinos e acessar os vídeos dos exercícios.

## Estrutura do Projeto

```
backend/
│
├── config/
│   └── db.js            # Conexão com o MongoDB
│
├── controllers/
│   ├── authController.js # Controladores de autenticação
│   └── workoutController.js # Controladores de treinos
│
├── middleware/
│   └── authMiddleware.js # Middleware de autenticação
│
├── models/
│   ├── User.js          # Modelo de usuário
│   └── Workout.js       # Modelo de treino
│
├── routes/
│   ├── authRoutes.js    # Rotas de autenticação
│   └── workoutRoutes.js  # Rotas de treinos
│
├── .env                  # Variáveis de ambiente
├── package.json          # Dependências do projeto
└── server.js             # Arquivo principal do servidor
```

## Pré-requisitos

- **Node.js**: Certifique-se de que o Node.js esteja instalado em sua máquina. Você pode baixar o Node.js [aqui](https://nodejs.org/).
- **MongoDB**: Você pode usar o MongoDB localmente ou um serviço como o MongoDB Atlas. Para uso local, instale o MongoDB seguindo as instruções [aqui](https://docs.mongodb.com/manual/installation/).

## Configuração

1. **Clone o repositório**

   ```bash
   git clone https://github.com/kiograco/academia-app.git
   cd academia-app/backend
   ```

2. **Instale as dependências**

   Execute o seguinte comando para instalar as dependências do projeto:

   ```bash
   npm install
   ```

3. **Crie o arquivo `.env`**

   Copie o arquivo `.env.example` para `.env` e configure as variáveis necessárias:

   ```plaintext
   MONGO_URI=<sua_uri_do_mongodb>
   JWT_SECRET=<seu_segredo_de_jwt>
   ```

   Exemplo de `MONGO_URI` para MongoDB Atlas:

   ```plaintext
   MONGO_URI=mongodb+srv://<usuario>:<senha>@cluster0.mongodb.net/academia-app?retryWrites=true&w=majority
   ```

4. **Scripts**

   Adicione os seguintes scripts ao seu `package.json` para facilitar o desenvolvimento:

   ```json
   "scripts": {
     "start": "node server.js",
     "dev": "nodemon server.js",
     "test": "echo \"Error: no test specified\" && exit 1"
   }
   ```

   - **start**: Inicia o servidor em modo de produção.
   - **dev**: Inicia o servidor em modo de desenvolvimento com Nodemon (atualiza automaticamente as alterações).

## Executando o Backend

Para iniciar o servidor, você pode usar um dos seguintes comandos:

- Em modo de produção:

  ```bash
  npm start
  ```

- Em modo de desenvolvimento (com atualizações automáticas):

  ```bash
  npm run dev
  ```

O servidor estará rodando em `http://localhost:5000`.

## Testando a API

Você pode usar ferramentas como **Postman** ou **Insomnia** para testar as rotas da API:

- **Registrar um novo usuário**: `POST /auth/register`
- **Login de usuário**: `POST /auth/login`
- **Criar um novo treino**: `POST /workouts`
- **Listar treinos do professor**: `GET /workouts`
- **Visualizar treino por ID**: `GET /workouts/:id`

## Contribuição

Se você deseja contribuir para este projeto, fique à vontade para abrir uma *issue* ou enviar um *pull request*.

## Licença

Este projeto está licenciado sob a MIT License. Veja o arquivo `LICENSE` para mais detalhes.
```